name: Create Jira Ticket from Copilot Code Review

on:
  pull_request_review:
    types: [submitted]

jobs:
  create-jira-ticket:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR review comments
        id: get-comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const comments = await github.rest.pulls.listReviewComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const allComments = comments.data.map(c => ({
              id: c.id,
              body: c.body,
              path: c.path,
              line: c.line || null
            }));
            return JSON.stringify(allComments);

      - name: Create Jira Service Desk Tickets
        if: steps.get-comments.outputs.result != '[]'
        uses: actions/github-script@v7
        env:
          JIRA_BASE_URL: https://sruthikaprodapt.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: APB
          SERVICE_DESK_ID: "2"
          REQUEST_TYPE_ID: "10001"
        with:
          script: |
            const core = require('@actions/core');
            const allComments = JSON.parse('${{ steps.get-comments.outputs.result }}');
            for (const comment of allComments) {
              console.log(`Creating Jira ticket for comment ID: ${comment.id}`);
              // Sanitize comment body to remove control characters and normalize newlines
              const sanitizedBody = comment.body.replace(/[\n\r]+/g, ' ').replace(/[\x00-\x1F\x7F-\x9F]/g, '');
              const description = {
                version: 1,
                type: 'doc',
                content: [
                  {
                    type: 'paragraph',
                    content: [
                      { type: 'text', text: 'Comment Details: ' },
                      { type: 'text', text: sanitizedBody }
                    ]
                  },
                  {
                    type: 'paragraph',
                    content: [
                      { type: 'text', text: 'File: ' },
                      { type: 'text', text: comment.path }
                    ]
                  },
                  {
                    type: 'paragraph',
                    content: [
                      { type: 'text', text: 'Line: ' },
                      { type: 'text', text: comment.line ? String(comment.line) : 'N/A' }
                    ]
                  },
                  {
                    type: 'paragraph',
                    content: [
                      { type: 'text', text: 'Repository: ' },
                      { type: 'text', text: '${{ github.repository }}' }
                    ]
                  },
                  {
                    type: 'paragraph',
                    content: [
                      { type: 'text', text: 'Pull Request: ' },
                      { type: 'text', text: '${{ github.event.pull_request.html_url }}' }
                    ]
                  },
                  {
                    type: 'paragraph',
                    content: [
                      { type: 'text', text: 'Comment ID: ' },
                      { type: 'text', text: String(comment.id) }
                    ]
                  },
                  {
                    type: 'paragraph',
                    content: [
                      { type: 'text', text: 'Commit SHA: ' },
                      { type: 'text', text: '${{ github.sha }}' }
                    ]
                  },
                  {
                    type: 'paragraph',
                    content: [
                      { type: 'text', text: 'Created by GitHub Action' }
                    ]
                  }
                ]
              };
              try {
                const response = await fetch('${{ env.JIRA_BASE_URL }}/rest/servicedeskapi/request', {
                  method: 'POST',
                  headers: {
                    'Authorization': `Basic ${Buffer.from('${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}').toString('base64')}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    serviceDeskId: '${{ env.SERVICE_DESK_ID }}',
                    requestTypeId: '${{ env.REQUEST_TYPE_ID }}',
                    requestFieldValues: {
                      summary: `PR Review Comment #${{ github.event.pull_request.number }} (Comment ID: ${comment.id})`,
                      description: description,
                      project: { key: '${{ env.JIRA_PROJECT_KEY }}' }
                    }
                  })
                });
                const responseData = await response.json();
                if (!response.ok) {
                  throw new Error(`HTTP error ${response.status}: ${response.statusText} - ${JSON.stringify(responseData)}`);
                }
                console.log(`Jira ticket created for comment ID: ${comment.id} - Issue Key: ${responseData.issueKey}`);
              } catch (error) {
                console.error(`Failed to create Jira ticket for comment ${comment.id}:`, error);
                core.setFailed(`Failed to create Jira ticket for comment ${comment.id}: ${error.message}`);
              }
            }
