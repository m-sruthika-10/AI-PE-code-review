name: Create Jira Ticket for All PR Review Comments
on:
  pull_request_review_comment:
    types: [created]

jobs:
  create-jira-ticket:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to access code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Fetch all PR review comments
      - name: Get PR Review Comments
        id: get-comments
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.pulls.listReviewComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            // Include all comments without filtering
            const allComments = comments.data
              .map(comment => ({
                body: comment.body,
                id: comment.id,
                path: comment.path,
                line: comment.line
              }));
            // Store comments as JSON for the next step
            core.setOutput('all_comments', JSON.stringify(allComments));
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

      # Create Jira ticket for each comment
      - name: Create Jira Service Desk Tickets
        if: steps.get-comments.outputs.all_comments != '[]'
        uses: actions/github-script@v7
        with:
          script: |
            const allComments = JSON.parse('${{ steps.get-comments.outputs.all_comments }}');
            for (const comment of allComments) {
              const response = await fetch('https://sruthikaprodapt.atlassian.net/rest/servicedeskapi/request', {
                method: 'POST',
                headers: {
                  'Authorization': `Basic ${{ secrets.JIRA_API_TOKEN }}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  serviceDeskId: '2',
                  requestTypeId: '10001',
                  requestFieldValues: {
                    summary: 'PR Review Comment',
                    description: `**Comment Details**: ${comment.body}\n\n` +
                                 `**File**: ${comment.path}\n` +
                                 `**Line**: ${comment.line || 'N/A'}\n` +
                                 `**Repository**: ${{ github.repository }}\n` +
                                 `**Pull Request**: ${{ github.event.pull_request.html_url }}\n` +
                                 `**Comment ID**: ${comment.id}\n` +
                                 `**Commit SHA**: ${{ github.sha }}\n` +
                                 `Created by GitHub Action`
                  }
                })
              });
              if (!response.ok) {
                core.setFailed(`Failed to create Jira ticket for comment ${comment.id}: ${response.statusText}`);
              }
            }
        env:
          JIRA_AUTH_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
