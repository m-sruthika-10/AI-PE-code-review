name: Create Jira Ticket from Copilot Code Review

on:
  pull_request_review:
    types: [submitted]

jobs:
  create-jira-ticket:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR review comments
        id: get-comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const comments = await github.rest.pulls.listReviewComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            console.log('All comments:', comments.data.map(c => ({ body: c.body, user: c.user.login })));
            const violationComments = comments.data.filter(comment =>
              comment.body.toLowerCase().includes('suggestion') ||
              comment.body.toLowerCase().includes('issue') ||
              comment.body.toLowerCase().includes('problem') ||
              comment.body.toLowerCase().includes('linter') ||
              comment.body.toLowerCase().includes('style') ||
              comment.body.toLowerCase().includes('documentation') ||
              comment.body.toLowerCase().includes('eslint') ||
              comment.body.toLowerCase().includes('standards violation') ||
              comment.body.toLowerCase().includes('coding standard') ||
              comment.body.toLowerCase().includes('global variable') ||
              comment.body.toLowerCase().includes('side effects')
            );
            console.log('Filtered violation comments:', violationComments);
            return violationComments;

      - name: Create Jira issue
        if: steps.get-comments.outputs.result != '[]'
        env:
          JIRA_BASE_URL: https://sruthikaprodapt.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: APB
        run: |
          # Extract comments for the Jira description
          COMMENTS=$(echo '${{ steps.get-comments.outputs.result }}' | jq -r '.[] | .body')
          # Construct Jira payload with valid issue type
          JIRA_PAYLOAD=$(jq -n \
            --arg summary "Code Review Issues in PR #${{ github.event.pull_request.number }}" \
            --arg description "Found issues in PR: ${{ github.event.pull_request.html_url }}\n\nComments:\n${COMMENTS}" \
            --arg projectKey "$JIRA_PROJECT_KEY" \
            '{
              fields: {
                project: { key: $projectKey },
                summary: $summary,
                description: $description,
                issuetype: { name: "Submit a request or incident" }
                # Add required fields below based on createmeta output, e.g.:
                # ,customfield_10010: { id: "123" }
                # ,priority: { name: "Medium" }
              }
            }')
          echo "JIRA_PAYLOAD=$JIRA_PAYLOAD"
          curl -v -X POST \
            -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
            -H "Content-Type: application/json" \
            --data "$JIRA_PAYLOAD" \
            $JIRA_BASE_URL/rest/api/3/issue
