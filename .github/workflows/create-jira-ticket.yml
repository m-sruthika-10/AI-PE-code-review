name: Create Jira Ticket from Copilot Code Review

on:
  pull_request_review:
    types: [submitted]

jobs:
  create-jira-ticket:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR review comments
        id: get-comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const comments = await github.rest.pulls.listReviewComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const violationComments = comments.data.filter(comment =>
              comment.body.toLowerCase().includes('suggestion') ||
              comment.body.toLowerCase().includes('issue') ||
              comment.body.toLowerCase().includes('problem') ||
              comment.body.toLowerCase().includes('linter') ||
              comment.body.toLowerCase().includes('style') ||
              comment.body.toLowerCase().includes('documentation') ||
              comment.body.toLowerCase().includes('eslint') ||
              comment.body.toLowerCase().includes('standards violation') ||
              comment.body.toLowerCase().includes('coding standard') ||
              comment.body.toLowerCase().includes('global variable') ||
              comment.body.toLowerCase().includes('side effects')
            ).map(c => c.body);
            return JSON.stringify(violationComments);

      - name: Create Jira issue
        if: steps.get-comments.outputs.result != '[]'
        env:
          JIRA_BASE_URL: https://sruthikaprodapt.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: APB
          SERVICE_DESK_ID: "2"
          REQUEST_TYPE_ID: "10001"
        run: |
          # Debug: Print raw comments
          echo "Raw comments: ${{ steps.get-comments.outputs.result }}"

          # Parse comments as a JSON array with fallback
          COMMENTS=$(echo "${{ steps.get-comments.outputs.result }}" | jq -r '. | if type == "array" then . else [.] end' || echo "[]")
          echo "Parsed COMMENTS=$COMMENTS"

          # Construct ADF description
          DESCRIPTION=$(echo "$COMMENTS" | jq -R -s -c \
            --arg pr_url "${{ github.event.pull_request.html_url }}" \
            '{
              "version": 1,
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "This issue was created based on a code review comment from a pull request. Details: \($pr_url)"
                    }
                  ]
                }
              ] + (split("\n") | map(select(. != "") | {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": .
                  }
                ]
              }))
            }' || { echo "Error: Failed to construct DESCRIPTION"; exit 1; })
          echo "DESCRIPTION=$DESCRIPTION"

          # Validate DESCRIPTION
          if ! echo "$DESCRIPTION" | jq -e . > /dev/null 2>&1; then
            echo "Error: DESCRIPTION is not valid JSON"
            exit 1
          fi

          # Construct Jira payload
          JIRA_PAYLOAD=$(jq -n \
            --arg summary "Code Review Issues in PR #${{ github.event.pull_request.number }}" \
            --argjson description "$DESCRIPTION" \
            --arg serviceDeskId "$SERVICE_DESK_ID" \
            --arg requestTypeId "$REQUEST_TYPE_ID" \
            --arg projectKey "$JIRA_PROJECT_KEY" \
            '{
              "serviceDeskId": $serviceDeskId,
              "requestTypeId": $requestTypeId,
              "requestFieldValues": {
                "summary": $summary,
                "description": $description,
                "project": { "key": $projectKey }
              }
            }' | jq -c . || { echo "Error: Failed to construct JIRA_PAYLOAD"; exit 1; })
          echo "JIRA_PAYLOAD=$JIRA_PAYLOAD"

          # Validate JIRA_PAYLOAD
          if ! echo "$JIRA_PAYLOAD" | jq -e . > /dev/null 2>&1; then
            echo "Error: JIRA_PAYLOAD is not valid JSON"
            exit 1
          fi

          # Debug: Print final payload
          echo "Final JIRA_PAYLOAD=$JIRA_PAYLOAD"

          # Make the API call
          curl -v -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JIRA_PAYLOAD" \
            "$JIRA_BASE_URL/rest/servicedeskapi/request" || { echo "Error: API call failed"; exit 1; }
