name: Create Jira Ticket from Copilot Code Review

on:
  pull_request_review:
    types: [submitted]

jobs:
  create-jira-ticket:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR review comments
        id: get-comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const comments = await github.rest.pulls.listReviewComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            console.log('All comments:', comments.data.map(c => ({ body: c.body, user: c.user.login })));
            const violationComments = comments.data.filter(comment =>
              comment.body.toLowerCase().includes('suggestion') ||
              comment.body.toLowerCase().includes('issue') ||
              comment.body.toLowerCase().includes('problem') ||
              comment.body.toLowerCase().includes('linter') ||
              comment.body.toLowerCase().includes('style') ||
              comment.body.toLowerCase().includes('documentation') ||
              comment.body.toLowerCase().includes('eslint') ||
              comment.body.toLowerCase().includes('standards violation') ||
              comment.body.toLowerCase().includes('coding standard') ||
              comment.body.toLowerCase().includes('global variable') ||
              comment.body.toLowerCase().includes('side effects')
            ).map(c => c.body);
            console.log('Filtered violation comments:', violationComments);
            return JSON.stringify(violationComments);

      - name: Create Jira issue
        if: steps.get-comments.outputs.result != '[]'
        env:
          JIRA_BASE_URL: https://sruthikaprodapt.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: APB
          SERVICE_DESK_ID: 2
          REQUEST_TYPE_ID: 10001
        run: |
          # Parse comments as a JSON array
          COMMENTS=$(echo '${{ steps.get-comments.outputs.result }}' | jq -r '.')
          # Construct ADF description
          DESCRIPTION=$(jq -n \
            --arg pr_url "${{ github.event.pull_request.html_url }}" \
            --argjson comments "$COMMENTS" \
            '{
              "type": "doc",
              "version": 1,
              "content": (
                [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This issue was created based on a code review comment from a pull request. Details: \($pr_url)"
                      }
                    ]
                  }
                ] + (
                  $comments | map(
                    select(length > 0) | {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": .
                        }
                      ]
                    }
                  )
                )
              )
            }')
          # Construct Jira payload
          JIRA_PAYLOAD=$(jq -n \
            --arg summary "Code Review Issues in PR #${{ github.event.pull_request.number }}" \
            --argjson description "$DESCRIPTION" \
            --arg projectKey "$JIRA_PROJECT_KEY" \
            --arg serviceDeskId "$SERVICE_DESK_ID" \
            --arg requestTypeId "$REQUEST_TYPE_ID" \
            '{
              "fields": {
                "project": { "key": $projectKey },
                "summary": $summary,
                "description": $description,
                "issuetype": { "name": "Submit a request or incident" }
              },
              "serviceDeskId": $serviceDeskId,
              "requestTypeId": $requestTypeId
            }')
          echo "COMMENTS=$COMMENTS"
          echo "JIRA_PAYLOAD=$JIRA_PAYLOAD"
          curl -v -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JIRA_PAYLOAD" \
            "$JIRA_BASE_URL/rest/servicedeskapi/request"
