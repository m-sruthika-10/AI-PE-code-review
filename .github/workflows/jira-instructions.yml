name: Create Jira Ticket Details File and Auto-Merge
on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  update-instructions:
    runs-on: ubuntu-latest
    steps:
      # Checkout the main branch
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: main

      # Install Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install requests
        run: pip install requests

      # Extract Jira ticket ID from PR description
      - name: Extract Jira Ticket ID
        id: extract-jira
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          JIRA_TICKET=$(echo "$PR_BODY" | grep -Eo 'APB-[0-9]+' | head -n 1)
          if [ -z "$JIRA_TICKET" ]; then
            echo "Error: No Jira ticket ID found in PR description"
            exit 1
          fi
          echo "JIRA_TICKET=$JIRA_TICKET" >> $GITHUB_ENV
        shell: bash

      # Fetch Jira ticket details with retry logic
      - name: Fetch Jira Ticket Details
        run: |
          python -c "
          import requests
          import base64
          import json
          import time

          email = '${{ secrets.JIRA_USER_EMAIL }}'
          api_key = '${{ secrets.JIRA_API_TOKEN }}'
          domain = '${{ secrets.JIRA_BASE_URL }}'
          ticket_id = '${{ env.JIRA_TICKET }}'

          credentials = base64.b64encode(f'{email}:{api_key}'.encode('utf-8')).decode('utf-8')
          headers = {
              'Authorization': f'Basic {credentials}',
              'Accept': 'application/json'
          }
          url = f'{domain}/rest/api/3/issue/{ticket_id}?fields=summary,description'
          for _ in range(3):
              response = requests.get(url, headers=headers)
              if response.status_code == 200:
                  with open('jira_ticket.json', 'w') as f:
                      json.dump(response.json(), f, indent=4)
                  break
              print(f'Retry {_+1}/3: Error {response.status_code} - {response.text}')
              time.sleep(1)
          else:
              print(f'Error: Failed to fetch Jira ticket after 3 attempts')
              exit(1)
          "
        env:
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}

      # Create a new unique branch to avoid conflicts
      - name: Create New Branch
        id: create-branch
        run: |
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="jira-instructions-${{ env.JIRA_TICKET }}-$TIMESTAMP"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        shell: bash

      # Create a new text file with Jira ticket details
      - name: Create Jira Ticket Details File
        run: |
          python -c "
          import json

          with open('jira_ticket.json') as f:
              ticket = json.load(f)
          ticket_id = ticket['key']
          summary = ticket['fields']['summary']
          description = ticket['fields']['description'] or 'No description provided'

          details = f'# Jira Ticket Details for PR #${{ github.event.pull_request.number }}\n\n' \
                    f'- **Ticket ID**: {ticket_id}\n' \
                    f'- **Summary**: {summary}\n' \
                    f'- **Description**: {description}\n'

          with open('.github/jira-ticket-details-${{ env.JIRA_TICKET }}.txt', 'w') as f:
              f.write(details)
          "
        shell: bash

      # Commit changes to the new branch
      - name: Commit Jira ticket details file
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add .github/jira-ticket-details-${{ env.JIRA_TICKET }}.txt
          git commit -m "Add Jira ticket ${{ env.JIRA_TICKET }} details to .github/jira-ticket-details-${{ env.JIRA_TICKET }}.txt for PR #${{ github.event.pull_request.number }}" || echo "No changes to commit"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

      # Create a pull request to merge into main
      - name: Create Pull Request for Jira ticket details
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const ticket_id = '${{ env.JIRA_TICKET }}';
            const pr_number = ${{ github.event.pull_request.number }};
            const branch_name = '${{ env.BRANCH_NAME }}';
            const result = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Add .github/jira-ticket-details-${ticket_id}.txt for PR #${pr_number}`,
              head: branch_name,
              base: 'main',
              body: `This PR adds Jira ticket ${ticket_id} details to .github/jira-ticket-details-${ticket_id}.txt for PR #${pr_number}. Auto-generated by GitHub Action.`
            });
            return result.data.number;

      # Auto-merge the pull request
      - name: Auto-Merge Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const pr_number = ${{ steps.create-pr.outputs.result }};
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                merge_method: 'merge'
              });
            } catch (error) {
              console.log(`Auto-merge failed: ${error.message}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.pull_request.number }},
                body: `Failed to auto-merge PR #${pr_number} for adding .github/jira-ticket-details-${{ env.JIRA_TICKET }}.txt. Please manually merge the PR to make the details available for Copilot review.`
              });
              throw error;
            }

      # Set PR status check for the original PR
      - name: Set PR Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'Jira ticket details added to .github/jira-ticket-details-${{ env.JIRA_TICKET }}.txt and merged into main',
              context: 'jira-instructions-check'
            });

      # Notify on failure
      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'Failed to fetch Jira ticket details, add .github/jira-ticket-details-${{ env.JIRA_TICKET }}.txt, or auto-merge PR. Please manually verify the PR against the Jira ticket ${{ env.JIRA_TICKET }}.'
            });
