name: Sync Confluence Java Coding Standards to GitHub
on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC
  workflow_dispatch: # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - 'docs/**'

jobs:
  sync-confluence:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git diff and PR creation

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          pip install requests html2text

      - name: Fetch Confluence Page
        env:
          CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
          CONFLUENCE_BASE_URL: ${{ secrets.CONFLUENCE_BASE_URL }}
          CONFLUENCE_PAGE_ID: ${{ secrets.CONFLUENCE_PAGE_ID }}
        run: |
          python -c "
          import requests
          import html2text
          import os
          url = f'$CONFLUENCE_BASE_URL/rest/api/content/$CONFLUENCE_PAGE_ID?expand=body.storage'
          auth = ('$CONFLUENCE_USERNAME', '$CONFLUENCE_API_TOKEN')
          response = requests.get(url, auth=auth)
          response.raise_for_status()
          data = response.json()
          content = data['body']['storage']['value']
          # Convert XHTML to Markdown
          h = html2text.HTML2Text()
          h.ignore_links = False
          markdown = h.handle(content)
          # Save to file
          os.makedirs('docs', exist_ok=True)
          with open('docs/java_coding_standards.md', 'w') as f:
              f.write('# Java Coding Standards\n\n' + markdown)
          "

      - name: Check for changes and create branch
        id: check-changes
        run: |
          set -x
          BRANCH_NAME="confluence-sync-$(date +%s)"
          # Check if branch already exists in remote
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists in remote, generating new branch name"
            BRANCH_NAME="confluence-sync-$(date +%s)-$(openssl rand -hex 4)"
          fi
          git checkout -b "$BRANCH_NAME"
          git add docs/java_coding_standards.md
          if git diff --staged --quiet; then
            echo "No changes to java_coding_standards.md; skipping PR"
            echo "branch_name=" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in java_coding_standards.md"
            git commit -m "Sync Java Coding Standards from Confluence"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        if: steps.check-changes.outputs.branch_name != ''
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          BRANCH_NAME: ${{ steps.check-changes.outputs.branch_name }}
        run: |
          set -x
          git push --set-upstream origin "$BRANCH_NAME" || { echo "Error: Failed to push branch $BRANCH_NAME"; exit 1; }

      - name: Create Pull Request
        id: create-pr
        if: steps.check-changes.outputs.branch_name != ''
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          BRANCH_NAME: ${{ steps.check-changes.outputs.branch_name }}
        run: |
          set -x
          PR_URL=$(gh pr create \
            --base main \
            --head "$BRANCH_NAME" \
            --title "Sync Java Coding Standards from Confluence" \
            --body "Automated sync of Java Coding Standards from Confluence page." \
            --repo m-sruthika-10/AI-PE-code-review) || { echo "Error: Failed to create PR"; exit 1; }
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "Created PR #$PR_NUMBER"
          echo "pull_request_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Auto-merge Pull Request
        if: steps.create-pr.outputs.pull_request_number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          set -x
          PR_NUMBER=${{ steps.create-pr.outputs.pull_request_number }}
          # Wait briefly to ensure PR is ready
          sleep 5
          gh pr merge $PR_NUMBER --squash --auto --delete-branch || { echo "Error: Failed to enable auto-merge for PR #$PR_NUMBER"; exit 1; }
