name: Sync guardrails.txt from source repo

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC (5:30 AM IST)
  workflow_dispatch: # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-guardrails-from-repo.yml'

jobs:
  sync-guardrails:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Configure Git credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "action@github.com"
          echo "Git configuration set"

      - name: Fetch guardrails.txt from source repository
        env:
          SOURCE_REPO: 'm-sruthika-10/main'
          SOURCE_BRANCH: 'dev_test'
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          set -x
          curl -H "Accept: application/vnd.github.v3.raw" \
            -H "Authorization: Bearer $REPO_ACCESS_TOKEN" \
            "https://api.github.com/repos/$SOURCE_REPO/contents/guardrails.txt?ref=$SOURCE_BRANCH" \
            -o guardrails.txt || { echo "Error fetching guardrails.txt"; exit 1; }
          if [ ! -f guardrails.txt ]; then
            echo "Failed to fetch guardrails.txt"
            exit 1
          fi
          if grep -q '"message": "Bad credentials"' guardrails.txt; then
            echo "Error: Bad credentials; check REPO_ACCESS_TOKEN"
            exit 1
          fi

      - name: Check for changes and create branch
        id: check-changes
        run: |
          set -x
          BRANCH_NAME="sync-guardrails-$(date +%s)"
          # Check if branch already exists in remote
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists in remote, generating new branch name"
            BRANCH_NAME="sync-guardrails-$(date +%s)-$(openssl rand -hex 4)"
          fi
          git checkout -b "$BRANCH_NAME"
          git add guardrails.txt
          if git diff --staged --quiet; then
            echo "No changes to guardrails.txt; skipping PR"
            echo "branch_name=" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in guardrails.txt"
            git commit -m "Sync guardrails.txt from $SOURCE_REPO dev_test branch"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        if: steps.check-changes.outputs.branch_name != ''
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          BRANCH_NAME: ${{ steps.check-changes.outputs.branch_name }}
        run: |
          set -x
          git push --set-upstream origin "$BRANCH_NAME" || { echo "Error: Failed to push branch $BRANCH_NAME"; exit 1; }

      - name: Create Pull Request
        id: create-pr
        if: steps.check-changes.outputs.branch_name != ''
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          BRANCH_NAME: ${{ steps.check-changes.outputs.branch_name }}
        run: |
          set -x
          PR_URL=$(gh pr create \
            --base main \
            --head "$BRANCH_NAME" \
            --title "Sync guardrails.txt from m-sruthika-10/main dev_test branch" \
            --body "Automated sync of guardrails.txt from m-sruthika-10/main dev_test branch." \
            --repo m-sruthika-10/AI-PE-code-review) || { echo "Error: Failed to create PR"; exit 1; }
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "Created PR #$PR_NUMBER"
          echo "pull_request_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Auto-merge Pull Request
        if: steps.create-pr.outputs.pull_request_number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          set -x
          PR_NUMBER=${{ steps.create-pr.outputs.pull_request_number }}
          # Wait briefly to ensure PR is ready
          sleep 5
          gh pr merge $PR_NUMBER --squash --auto --delete-branch || { echo "Error: Failed to enable auto-merge for PR #$PR_NUMBER"; exit 1; }
