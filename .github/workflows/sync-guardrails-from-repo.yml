name: Sync guardrails.txt from source repo

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC (5:30 AM IST)
  workflow_dispatch: # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-guardrails-from-repo.yml'

jobs:
  sync-guardrails:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          ref: main
          #token: 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 # Use PAT for authentication

      - name: Configure Git credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "action@github.com"
          git config --global --add safe.directory /github/workspace
          echo "Git configuration set"

      - name: Fetch guardrails.txt from source repository
        env:
          SOURCE_REPO: 'm-sruthika-10/main' # Replace with actual source repo name
          SOURCE_BRANCH: 'dev_test' # Source branch
          REPO_ACCESS_TOKEN: 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
        run: |
          set -x # Enable verbose logging
          curl -H "Accept: application/vnd.github.v3.raw" \
            -H "Authorization: Bearer $REPO_ACCESS_TOKEN" \
            "https://api.github.com/repos/$SOURCE_REPO/contents/guardrails.txt?ref=$SOURCE_BRANCH" \
            -o guardrails.txt || { echo "Error fetching guardrails.txt; check token, repository, or file existence."; exit 1; }
          # Verify file was downloaded
          if [ ! -f guardrails.txt ]; then
            echo "Failed to fetch guardrails.txt; exiting."
            exit 1
          fi

      - name: Create branch and commit changes
        id: commit-changes # Add ID to reference outputs
        env:
          REPO_ACCESS_TOKEN: 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
        run: |
          set -x # Enable verbose logging
          # Create a new branch with a unique name
          BRANCH_NAME="sync-guardrails-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          git add guardrails.txt
          if git diff --staged --quiet; then
            echo "No changes to guardrails.txt; skipping commit."
            echo "branch_name=" >> $GITHUB_OUTPUT # Set empty branch name to skip PR
          else
            git commit -m "Sync guardrails.txt from $SOURCE_REPO dev_test branch"
            # Push with error handling
            if ! git push https://x-access-token:$REPO_ACCESS_TOKEN@github.com/m-sruthika-10/AI-PE-code-review.git "$BRANCH_NAME"; then
              echo "Error: Failed to push branch $BRANCH_NAME"
              exit 1
            fi
            echo "Branch pushed: $BRANCH_NAME"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT # Pass branch name to next step
          fi

      - name: Create Pull Request
        if: steps.commit-changes.outputs.branch_name != '' # Only run if branch was created
        uses: peter-evans/create-pull-request@v7
        with:
          token: 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 # Use PAT
          branch: ${{ steps.commit-changes.outputs.branch_name }} # Use branch name from previous step
          base: main
          title: "Sync guardrails.txt from $SOURCE_REPO dev_test branch"
          body: |
            Automated sync of guardrails.txt from $SOURCE_REPO dev_test branch.
            This PR updates the guardrails.txt file with the latest changes.
          commit-message: "Sync guardrails.txt from $SOURCE_REPO dev_test branch"
          delete-branch: true # Delete the branch after PR is merged
